<?xml version="1.0" ?>
<%
  # Based on Gazebo example

  # Vehicle with rigid suspension and front steering
  # Consists of box chassis with 4 non-steerable wheels
  # SI units (length in meters)

  # Geometry
  chassis_dx   = 0.4
  chassis_dy   = 0.2
  chassis_dz   = 0.1
  wheel_radius = 0.1
  wheel_width  = 0.05
  chassis_z0   = wheel_radius * 2 - chassis_dz / 2.0
  wheel_x0     = chassis_dx*0.3
  wheel_y0     = chassis_dy*0.5 + wheel_width*0.6 + 0.010
  steer_limit  = 75 * Math::PI / 180.0
  caster_angle =  5 * Math::PI / 180.0

  front_wheel_locations = {
    "fl" => {:x0 => wheel_x0, :y0 => wheel_y0 },
    "fr" => {:x0 => wheel_x0, :y0 => -wheel_y0 },
  }
  rear_wheel_locations = {
    "rl" => {:x0 => -wheel_x0, :y0 => wheel_y0 },
    "rr" => {:x0 => -wheel_x0, :y0 => -wheel_y0 },
  }

  # inertia
  chassis_mass = 2.0
  chassis_ixx  = chassis_mass/12.0 * (chassis_dy**2 + chassis_dz**2)
  chassis_iyy  = chassis_mass/12.0 * (chassis_dz**2 + chassis_dx**2)
  chassis_izz  = chassis_mass/12.0 * (chassis_dx**2 + chassis_dy**2)

  # chassis c.g. offset from center of box
  chassis_cgx  = chassis_dx*0.1
  chassis_cgy  = 0 
  chassis_cgz  = 0 
  wheel_mass   = 0.25
  wheel_ixx    = wheel_mass * (wheel_radius**2 / 4.0 + wheel_width**2 / 12.0)
  wheel_iyy    = wheel_mass * (wheel_radius**2 / 4.0 + wheel_width**2 / 12.0)
  wheel_izz    = wheel_mass/2.0 * wheel_radius**2
%>
<sdf version="1.5">
  <!-- http://sdformat.org/spec?elem=sensor&ver=1.5 -->
  <model name="tankbot">
    <link name="chassis">
      <pose>0 0 0.11  0 0 0</pose>
      <inertial>
        <pose><%= chassis_cgx %> <%= chassis_cgy %> <%= chassis_cgz %>  0 0 0</pose>
        <mass><%= chassis_mass %></mass>
        <inertia>
          <ixx><%= chassis_ixx %></ixx>
          <iyy><%= chassis_iyy %></iyy>
          <izz><%= chassis_izz %></izz>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyz>0</iyz>
        </inertia>
      </inertial>
      <collision name="collision">
        <geometry>
          <box>
            <size><%= chassis_dx %> <%= chassis_dy %> <%= chassis_dz %></size>
          </box>
        </geometry>
      </collision>
      <visual name='visual'>
        <pose>0 0 0.05 0 0 0</pose>
        <geometry>
          <mesh>
            <uri>model://pioneer2dx/meshes/chassis.dae</uri>
            <scale>0.9 0.5 0.5</scale>
          </mesh>
        </geometry>
      </visual>
      
      <collision name='caster_collision'>
        <pose>0.15 0 -0.05 0 0 0</pose>
        <geometry>
            <sphere>
            <radius>.05</radius>
          </sphere>
        </geometry>
        <surface>
          <friction>
            <ode>
              <mu>0</mu>
              <mu2>0</mu2>
              <slip1>1.0</slip1>
              <slip2>1.0</slip2>
            </ode>
          </friction>
        </surface>
      </collision>

      <visual name='caster_visual'>
        <pose>0.15 0 -0.05 0 0 0</pose>
        <geometry>
          <sphere>
            <radius>.05</radius>
          </sphere>
        </geometry>
      </visual>
    </link>

    <%
      rear_wheel_locations.keys.each do |k|
        x0 = rear_wheel_locations[k][:x0]
        y0 = rear_wheel_locations[k][:y0]
    %>
    <%= "<link name=" + '"wheel_' + k + '">' %>
      <pose>
       <%= x0 %> <%= y0 %> <%= wheel_radius %>
       <%= -Math::PI/2 %> 0 0
      </pose>
      <inertial>
        <mass><%= wheel_mass %></mass>
        <inertia>
          <ixx><%= wheel_ixx %></ixx>
          <iyy><%= wheel_iyy %></iyy>
          <izz><%= wheel_izz %></izz>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyz>0</iyz>
        </inertia>
      </inertial>
      <collision name="collision">
        <geometry>
          <cylinder>
            <radius><%= wheel_radius %></radius>
            <length><%= wheel_width %></length>
          </cylinder>
        </geometry>
      </collision>
      <visual name="visual">
        <geometry>
          <cylinder>
            <radius><%= wheel_radius %></radius>
            <length><%= wheel_width %></length>
          </cylinder>
        </geometry>
        <material>
          <script>
            <uri>file://media/materials/scripts/gazebo.material</uri>
            <name>Gazebo/Black</name>
          </script>
        </material>
      </visual>
    </link>
    <%= "<joint name=" + '"wheel_' + k + '_drive" type="revolute">' %>
      <parent>chassis</parent>
      <%= "<child>wheel_" + k + "</child>" %>
      <axis>
        <xyz>0 0 1</xyz>
      </axis>
    </joint>
    <% end %>
    

    <include>
      <uri>model://ultrasonic_sensor</uri>
      <pose>
        0.15 0.0 0.2
        0.0 0.0 0.0
      </pose>
    </include>

    <joint name="sonar_joint" type="fixed">
      <child>ultrasonic_sensor::link</child>
      <parent>chassis</parent>
    </joint>
    
    <include>
      <uri>model://camera_sensor</uri>
      <pose>
        0.15 0.0 0.3
        0.0 0.0 0.0
      </pose>
    </include>

    <joint name="camera_joint" type="fixed">
      <child>camera_sensor::link</child>
      <parent>chassis</parent>
    </joint>
    
    <include>
      <uri>model://mainboard</uri>
      <pose>
        0.0 0.0 0.0
        0.0 0.0 0.0
      </pose>
    </include>

    <joint name="board_joint" type="fixed">
      <child>mainboard::boarder</child>
      <parent>chassis</parent>
    </joint>
  </model>
</sdf>
